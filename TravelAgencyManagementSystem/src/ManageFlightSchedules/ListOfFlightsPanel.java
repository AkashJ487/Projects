/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ManageFlightSchedules;
import Business.*;
import ManageAirliners.ViewAirlinerPanel;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author JAGTAP
 */
public class ListOfFlightsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListOfFlightsPanel
     */
    private TravelAgency travelAgency;
    private JPanel cardSequenceJPanel;
    private ArrayList<Flight> sortListofFlight;
    public ListOfFlightsPanel(TravelAgency travelAgency, JPanel cardSequenceJPanel) {
        initComponents();
        this.travelAgency=travelAgency;
        this.cardSequenceJPanel=cardSequenceJPanel;
        sortListofFlight=new ArrayList<Flight>();
        sortFlight();
        reload();
    }
    
    public void reload()
    {
        Collections.sort(sortListofFlight, new DateTimeComparator());
        DefaultTableModel dtm = (DefaultTableModel) FlightsTable.getModel();
        dtm.setRowCount(0);
        for(Flight f : sortListofFlight)
        {
            Object row[] = new Object[8];
            row[0]=f;
            row[1]=f.getFlightId();
            row[2]=f.getDepatureDate();
            row[3]=f.getDepatureTime();
            row[4]=f.getDepaturePort();
            row[5]= f.getDestinationPort();
            row[6]=f.getPriceOfSeat();
            if (f.isCancelFlag())
                row[7]="Canceled";
            else
                row[7]="Available";
            dtm.addRow(row);
        }
        
    }
    public void sortFlight()
    {
        for(FlightSchedule fs : travelAgency.getMasterSchedule().getListOfFlightSchedules())
        {
            for(Flight f: fs.getListOfFlight())
            {
                sortListofFlight.add(f);
            }
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FlightsTable = new javax.swing.JTable();
        viewDetailsButton = new javax.swing.JButton();
        srchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        fromPortTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        toPortTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        dateTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        timeTextField = new javax.swing.JTextField();

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("  List Of Flights ");

        FlightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airliner", "Flight Id", "Date", "Time", "From", "To", "Price/Seat", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(FlightsTable);

        viewDetailsButton.setText("View Details");
        viewDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsButtonActionPerformed(evt);
            }
        });

        srchButton.setText("Search");
        srchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srchButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("From");

        jLabel3.setText("To");

        jLabel4.setText("Date (mm-dd-yyyy)");

        jLabel5.setText("Time 24hrs (hh:mm)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(srchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(viewDetailsButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateTextField)
                                    .addComponent(fromPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(timeTextField))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(98, 98, 98)
                                        .addComponent(toPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(44, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(backButton))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(srchButton)
                    .addComponent(jLabel2)
                    .addComponent(fromPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(toPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(timeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewDetailsButton))
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = FlightsTable.getSelectedRow();
        if (selectedRow < 0 )
            JOptionPane.showMessageDialog(null, "Please select a row");
        else
        {
            Flight flight = (Flight)FlightsTable.getValueAt(selectedRow,0);
            ViewUpdateFlightPanel viewUpdateFlightPanel = new ViewUpdateFlightPanel(flight,cardSequenceJPanel);
            cardSequenceJPanel.add("ViewUpdateFlight",viewUpdateFlightPanel);
            CardLayout cardLayout = (CardLayout) cardSequenceJPanel.getLayout();
            cardLayout.next(cardSequenceJPanel);    
        }
    }//GEN-LAST:event_viewDetailsButtonActionPerformed

    private void srchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srchButtonActionPerformed
        // TODO add your handling code here:
        if((fromPortTextField.getText().isEmpty()) || (toPortTextField.getText().isEmpty()) ||
           (dateTextField.getText().isEmpty()) || (timeTextField.getText().isEmpty()))
        {
            JOptionPane.showMessageDialog(null, "Please enter from,to,Date,Time details for search", "Error", 0);
        }
        else
        {
            try
            {
                byte flag = dateValidation(dateTextField.getText());
                if(flag == 0)
                {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy"); 
                    Date date = (Date)dateFormat.parse(dateTextField.getText());
                    Date currdate = (Date)dateFormat.parse(dateFormat.format(new Date()));
                    flag = timeValidation(timeTextField.getText());
                    if (flag == 0)
                    {
                        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
                        Date time = (Date)timeFormat.parse(timeTextField.getText());
                        Date currtime = (Date)timeFormat.parse(timeFormat.format(new Date()));
                        if (((date.equals(currdate)) && (time.after(currtime))) || (date.after(currdate)))
                        {
                            DefaultTableModel dtm = (DefaultTableModel) FlightsTable.getModel();
                            dtm.setRowCount(0);
                            for(Flight f : sortListofFlight)
                            {
                                //System.out.println(( f.getAvailableSeats() >= 1 )+ " " + (f.getAirport().toLowerCase()).matches((srchAirportTextField.getText()).toLowerCase()));
                                if((((f.getDepaturePort()).toLowerCase()).matches((fromPortTextField.getText()).toLowerCase())) && 
                                   (((f.getDestinationPort()).toLowerCase()).matches((toPortTextField.getText()).toLowerCase())))
                                {
                                    Date date1 = (Date)dateFormat.parse(f.getDepatureDate());
                                    Date time1 = (Date)timeFormat.parse(f.getDepatureTime());
                                   // System.out.println(date1.equals(date) + " " + date1.after(date) + " "  + time1.after(time));
                                    if (((date1.equals(date)) && (time1.after(time))) || (date1.after(date)) )
                                            {
                                                flag=2;
                                                Object row[] = new Object[8];
                                                row[0]=f;
                                                row[1]=f.getFlightId();
                                                row[2]=f.getDepatureDate();
                                                row[3]=f.getDepatureTime();
                                                row[4]=f.getDepaturePort();
                                                row[5]= f.getDestinationPort();
                                                row[6]=f.getPriceOfSeat();
                                                if (f.isCancelFlag())
                                                    row[7]="Canceled";
                                                else
                                                    row[7]="Available";
                                                dtm.addRow(row);
                                            }
                                }
                                
                            }
                            if (flag != 2)
                            {
                                JOptionPane.showMessageDialog(null, "Sorry No Flights are schedule on or after this date", "Information", 3);
                            }
                        }
                        else 
                            JOptionPane.showMessageDialog(null, "Please Enter Todays or future Date and time", "Error", 0);
                    }
                    else
                        JOptionPane.showMessageDialog(null, "Improper time format please enter time in HH:mm(24 hrs) format ", "Error", 0);
                }
                else
                    JOptionPane.showMessageDialog(null, "Improper date format please enter date in MM-dd-yyyy format ", "Error", 0);
            }
            catch(Exception e)
            {
                    JOptionPane.showMessageDialog(null, "Please enter date in MM-dd-yyyy & Time in HH:mm(24 hrs) format ", "Error", 0);
                    e.printStackTrace();
            }
        }
    }//GEN-LAST:event_srchButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        cardSequenceJPanel.remove(this);
        CardLayout cardLayout = (CardLayout) cardSequenceJPanel.getLayout();
        cardLayout.previous(cardSequenceJPanel);
    }//GEN-LAST:event_backButtonActionPerformed

    private byte dateValidation(String depatDateTextField)
    {
        if (depatDateTextField.matches("^[0-1][0-9][-][0-3][0-9][-][0-9][0-9][0-9][0-9]"))
        {
               if (((depatDateTextField.charAt(0)=='1') && (depatDateTextField.charAt(1)<'3')) ||
                   ((depatDateTextField.charAt(0)=='0') && (depatDateTextField.charAt(1)<='9')))
               {
                    if (((depatDateTextField.charAt(3)=='0') && (depatDateTextField.charAt(4)<='9')) ||
                        ((depatDateTextField.charAt(3)=='1') && (depatDateTextField.charAt(4)<='9')) ||
                        ((depatDateTextField.charAt(3)=='2') && (depatDateTextField.charAt(4)<='9')) ||
                        ((depatDateTextField.charAt(3)=='3') && (depatDateTextField.charAt(4)<'2')))
                    {
                         if(((depatDateTextField.charAt(0)=='0') && (depatDateTextField.charAt(1)=='2') &&
                             (depatDateTextField.charAt(3)=='3')) || 
                            ((depatDateTextField.charAt(0)=='0') && ((depatDateTextField.charAt(1)=='4') || (depatDateTextField.charAt(1)=='6') ||
                                                                              (depatDateTextField.charAt(1)=='9')) &&
                                                                             (depatDateTextField.charAt(3)=='3') && (depatDateTextField.charAt(4)=='1') ) ||
                            ((depatDateTextField.charAt(0)=='1') && (depatDateTextField.charAt(1)=='1') && (depatDateTextField.charAt(3)=='3') && 
                                 (depatDateTextField.charAt(4)=='1') ))
                         {
                               return 1;
                         }
                         else
                         {
                               return 0;
                         }
                    }
                     
                }
                            
        }
        return 1;                      
    }
    
    private byte timeValidation(String depatTimeTextField)
    {
        if (depatTimeTextField.matches("^[0-2][0-9][:][0-5][0-9]"))
        {
            if (((depatTimeTextField.charAt(0)=='2') && (depatTimeTextField.charAt(1) < '4')) ||
                 ((depatTimeTextField.charAt(0)=='1') && (depatTimeTextField.charAt(1) <='9'))||
                 ((depatTimeTextField.charAt(0)=='0') && (depatTimeTextField.charAt(1) <='9')))
            {
                return 0;
            }
        }
        return 1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FlightsTable;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JTextField fromPortTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton srchButton;
    private javax.swing.JTextField timeTextField;
    private javax.swing.JTextField toPortTextField;
    private javax.swing.JButton viewDetailsButton;
    // End of variables declaration//GEN-END:variables
}
