/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ManageCustomers;
import Business.*;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JAGTAP
 */
public class BestFlightPanel extends javax.swing.JPanel {

    /**
     * Creates new form BestFlightPanel
     */
    private TravelAgency travelAgency;
    private JPanel cardSequenceJPanel;
    private ArrayList<Flight> sortFlights;
    public BestFlightPanel(TravelAgency travelAgency, JPanel cardSequenceJPanel) {
        initComponents();
        this.travelAgency=travelAgency;
        this.cardSequenceJPanel=cardSequenceJPanel;
        sortFlights=new ArrayList<Flight>();
        sortFlight();
        reload();
    }

    public void reload()
    {
        Collections.sort(sortFlights, new PriceComparator());
        DefaultTableModel dtm = (DefaultTableModel) FlightsTable.getModel();
        dtm.setRowCount(0);
        for(Flight f : sortFlights)
        {
            if(!f.isCancelFlag())
            {
                Object row[] = new Object[8];
                row[0]=f;
                row[1]=f.getFlightId();
                row[2]=f.getDepatureDate();
                row[3]=f.getDepatureTime();
                row[4]=f.getDepaturePort();
                row[5]= f.getDestinationPort();
                row[6]=f.getPriceOfSeat();
                //if (f.isCancelFlag())
                //    row[7]="Canceled";
               // else
                    row[7]="Available";
                dtm.addRow(row);
            }
        }
        
    }
    public void sortFlight()
    {
        for(FlightSchedule fs : travelAgency.getMasterSchedule().getListOfFlightSchedules())
        {
            for(Flight f: fs.getListOfFlight())
            {
                sortFlights.add(f);
            }
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FlightsTable = new javax.swing.JTable();
        viewDetailsButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        depatPortTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        destiPortTextField = new javax.swing.JTextField();

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("  Best List Of Flights ");

        FlightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airliner", "Flight Id", "Date", "Time", "From", "To", "Price/Seat", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(FlightsTable);

        viewDetailsButton.setText("View Details");
        viewDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Depature Port");

        depatPortTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depatPortTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Destination Port");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(searchButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewDetailsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(depatPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(destiPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(backButton))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(jLabel2)
                    .addComponent(depatPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(destiPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewDetailsButton))
                .addContainerGap(95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = FlightsTable.getSelectedRow();
        if (selectedRow < 0 )
            JOptionPane.showMessageDialog(null, "Please select a row");
        else
        {
            Flight flight = (Flight)FlightsTable.getValueAt(selectedRow,0);
            BookFlightPanel bookFlightPanel = new BookFlightPanel(travelAgency,flight,cardSequenceJPanel);
            cardSequenceJPanel.add("BookFlight",bookFlightPanel);
            CardLayout cardLayout = (CardLayout) cardSequenceJPanel.getLayout();
            cardLayout.next(cardSequenceJPanel);    
        }
    }//GEN-LAST:event_viewDetailsButtonActionPerformed

    private void depatPortTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depatPortTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depatPortTextFieldActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        cardSequenceJPanel.remove(this);
        CardLayout cardLayout = (CardLayout) cardSequenceJPanel.getLayout();
        cardLayout.previous(cardSequenceJPanel);
    }//GEN-LAST:event_backButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        if((depatPortTextField.getText().isEmpty()) || (destiPortTextField.getText().isEmpty()))
            JOptionPane.showMessageDialog(null, "Please Enter Departure Port and Destination Port", "Error", 0);
        else
        {
            try
            {
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
                Date currdate = (Date)dateFormat.parse(dateFormat.format(new Date()));
                SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
                Date currtime = (Date)timeFormat.parse(timeFormat.format(new Date()));
                byte flag=0;
                DefaultTableModel dtm = (DefaultTableModel) FlightsTable.getModel();
                dtm.setRowCount(0);
                for(Flight f : sortFlights)
                {
                                //System.out.println(( f.getAvailableSeats() >= 1 )+ " " + (f.getAirport().toLowerCase()).matches((srchAirportTextField.getText()).toLowerCase()));
                    if((((f.getDepaturePort()).toLowerCase()).matches((depatPortTextField.getText()).toLowerCase())) && 
                        (((f.getDestinationPort()).toLowerCase()).matches((destiPortTextField.getText()).toLowerCase())))
                    {
                        Date date1 = (Date)dateFormat.parse(f.getDepatureDate());
                        Date time1 = (Date)timeFormat.parse(f.getDepatureTime());
                                       // System.out.println(date1.equals(date) + " " + date1.after(date) + " "  + time1.after(time));
                        if (((date1.equals(currdate)) && (time1.after(currtime))) || (date1.after(currdate)) )
                        {
                            flag=2;
                            Object row[] = new Object[8];
                            row[0]=f;
                            row[1]=f.getFlightId();
                            row[2]=f.getDepatureDate();
                            row[3]=f.getDepatureTime();
                            row[4]=f.getDepaturePort();
                            row[5]= f.getDestinationPort();
                            row[6]=f.getPriceOfSeat();
                            if (f.isCancelFlag())
                                row[7]="Canceled";
                            else
                                row[7]="Available";
                            dtm.addRow(row);
                        }
                    }
                                
                }
                if (flag != 2)
                {
                    JOptionPane.showMessageDialog(null, "Sorry No Flights are schedule for today or future dates for this Depature Port and Destination Port" , "Information", 3);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,"Date Parsing Error ","Error", 0);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FlightsTable;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField depatPortTextField;
    private javax.swing.JTextField destiPortTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton viewDetailsButton;
    // End of variables declaration//GEN-END:variables
}
